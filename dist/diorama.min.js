var Diorama=function(){"use strict";function e(e,t){if(e&&!e.startsWith("http")&&!e.startsWith("//"))if(e.startsWith("/"))e=location.origin+e;else{var r=location.pathname;r.endsWith("/")||(r=location.pathname.split("/").slice(0,-1).join("/")+"/"),e=location.origin+r+e}console.info("Allowing Altspace to load "+e);var o={src:e},n=new THREE.Texture(o);return t&&t(n),n}function t(e){return new Promise(function(t,r){if(i.models[e])return t(i.models[e]);if(/\.gltf$/i.test(e))if(THREE.glTFLoader){var o=new THREE.glTFLoader;o.load(e,function(r){return i.models[e]=r.scene.children[0].children[0],t(i.models[e])})}else if(THREE.GLTFLoader){var n=new THREE.GLTFLoader;n.load(e,function(r){return i.models[e]=r.scene.children[0],i.models[e].matrixAutoUpdate=!0,t(i.models[e])},function(){},r)}else console.error('glTF loader not found. "'+e+'" not loaded.'),r();else if(/\.dae$/i.test(e))if(THREE.ColladaLoader){var s=new THREE.ColladaLoader;s.load(e,function(r){return i.models[e]=r.scene.children[0],t(r.scene.children[0])},null,r)}else console.error('Collada loader not found. "'+e+'" not loaded.'),r()})}function r(e){return new Promise(function(t,r){if(i.textures[e])return t(i.textures[e]);var o=new THREE.TextureLoader;o.load(e,function(r){return i.textures[e]=r,t(r)},null,r)})}function o(e){return new Promise(function(t,o){return i.posters[e]?t(i.posters[e]):new r(e).then(function(r){var o,n=r.image.width/r.image.height,s=new THREE.MeshBasicMaterial({map:r,side:THREE.DoubleSide});return o=n>1?new THREE.PlaneGeometry(1,1/n):new THREE.PlaneGeometry(n,1),i.posters[e]=new THREE.Mesh(o,s),t(i.posters[e])})})}if(altspace.inClient){var n=function(){};THREE.Loader.Handlers.add(/jpe?g|png/i,{load:e,setCrossOrigin:n}),THREE.TextureLoader.prototype.load=e}var i={models:{},textures:{},posters:{}},s=function(e){function t(t,r,o){e.call(this,-1,1,1,-1,.1,400);var n=window.localStorage.getItem("dioramaViewSettings");n&&(n=JSON.parse(n),t||(t=(new THREE.Vector3).fromArray(n.focus)),r||(r=n.viewSize),o||(o=(new THREE.Vector3).fromArray(n.lookDirection))),this._viewSize=r||40,this._focus=t||new THREE.Vector3,this._lookDirection=o||new THREE.Vector3(0,-1,0),this.gridHelper=new THREE.GridHelper(300,1),this.gridHelper.userData={altspace:{collider:{enabled:!1}}}}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={viewSize:{},focus:{},lookDirection:{}};return r.viewSize.get=function(){return this._viewSize},r.viewSize.set=function(e){this._viewSize=e,this.recomputeViewport()},r.focus.get=function(){return this._focus},r.focus.set=function(e){this._focus.copy(e),this.recomputeViewport()},r.lookDirection.get=function(){return this._lookDirection},r.lookDirection.set=function(e){this._lookDirection.copy(e),this.recomputeViewport()},t.prototype.registerHooks=function(e){var t=this;t.renderer=e,document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var r=document.createElement("p");r.innerHTML=["Middle click and drag to pan","Mouse wheel to zoom","Arrow keys to rotate"].join("<br/>"),Object.assign(r.style,{position:"fixed",top:"10px",left:"10px",margin:0}),document.body.appendChild(r),window.addEventListener("resize",function(e){return t.recomputeViewport()}),t.recomputeViewport();var o=null,n=null;window.addEventListener("mousedown",function(e){1===e.button&&(o={x:e.clientX,y:e.clientY},n=t._focus.clone())}),window.addEventListener("mouseup",function(e){1===e.button&&(o=null,n=null)}),window.addEventListener("mousemove",function(e){if(o){var r=document.body,i=r.clientWidth,s=r.clientHeight,a=Math.sqrt(i*i+s*s)/t._viewSize,c=e.clientX-o.x,l=e.clientY-o.y,u=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._focus.copy(n).add(t.up.clone().multiplyScalar(l/a)).add(u.multiplyScalar(-c/a)),t.recomputeViewport()}}),window.addEventListener("wheel",function(e){e.deltaY<0?(t._viewSize*=.9,t.recomputeViewport()):e.deltaY>0&&(t._viewSize*=1.1,t.recomputeViewport())}),window.addEventListener("keydown",function(e){if("ArrowDown"===e.key){var r=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._lookDirection.applyAxisAngle(r,Math.PI/2),t.recomputeViewport()}else if("ArrowUp"===e.key){var o=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._lookDirection.applyAxisAngle(o,-Math.PI/2),t.recomputeViewport()}else"ArrowLeft"===e.key?(t._lookDirection.applyAxisAngle(t.up,-Math.PI/2),t.recomputeViewport()):"ArrowRight"===e.key&&(t._lookDirection.applyAxisAngle(t.up,Math.PI/2),t.recomputeViewport())})},t.prototype.recomputeViewport=function(){var e=document.body,t=e.clientWidth,r=e.clientHeight;this.renderer.setSize(t,r);var o=t/r,n=Math.sqrt(this._viewSize*this._viewSize/(o*o+1)),i=o*n;this.left=-i/2,this.right=i/2,this.top=n/2,this.bottom=-n/2,this.updateProjectionMatrix(),this.position.copy(this._focus).sub(this._lookDirection.clone().multiplyScalar(200)),1===Math.abs(this._lookDirection.normalize().dot(new THREE.Vector3(0,-1,0)))?this.up.set(0,0,1):this.up.set(0,1,0),this.lookAt(this._focus),window.localStorage.setItem("dioramaViewSettings",JSON.stringify({focus:this._focus.toArray(),viewSize:this._viewSize,lookDirection:this._lookDirection.toArray()}))},Object.defineProperties(t.prototype,r),t}(THREE.OrthographicCamera),a=function(e){void 0===e&&(e={});var t=e.bgColor;void 0===t&&(t=11184810);var r=e.gridOffset;void 0===r&&(r=[0,0,0]);var o=e.fullspace;void 0===o&&(o=!1);var n=this;n._cache=i,n.scene=new THREE.Scene,altspace.inClient?(n.renderer=altspace.getThreeJSRenderer(),n._envPromise=Promise.all([altspace.getEnclosure(),altspace.getSpace()]).then(function(e){function t(){n.scene.scale.setScalar(r.pixelsPerMeter),n.env=Object.assign({},r,i)}var r=e[0],i=e[1];t(),o?(n._fsPromise=r.requestFullspace().catch(function(e){return console.warn("Request for fullspace denied")}),r.addEventListener("fullspacechange",t)):n._fsPromise=Promise.resolve()})):(n.renderer=new THREE.WebGLRenderer,n.renderer.setSize(document.body.clientWidth,document.body.clientHeight),n.renderer.setClearColor(t),document.body.appendChild(n.renderer.domElement),n.previewCamera=new s,n.previewCamera.gridHelper.position.fromArray(r),n.scene.add(n.previewCamera,n.previewCamera.gridHelper),n.previewCamera.registerHooks(n.renderer),altspace.utilities.shims.cursor.init(n.scene,n.previewCamera,{renderer:n.renderer}),n.env={innerWidth:1024,innerHeight:1024,innerDepth:1024,pixelsPerMeter:o?1:1024/3,sid:"browser",name:"browser",templateSid:"browser"},n._envPromise=Promise.resolve(),n._fsPromise=Promise.resolve())};return a.prototype.start=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var r=this,o={};e.forEach(function(e){function t(e){void 0===o[e]?o[e]=!0:o[e]===!0&&(o[e]=!1)}Object.keys(e.assets.textures||{}).map(function(t){return e.assets.textures[t]}).forEach(t),Object.keys(e.assets.models||{}).map(function(t){return e.assets.models[t]}).forEach(t),Object.keys(e.assets.posters||{}).map(function(t){return e.assets.posters[t]}).forEach(t)});var n=e.reduce(function(e,t){return e||t.needsSkeleton},!1);n&&altspace.inClient?r._skelPromise=Promise.all([altspace.getThreeJSTrackingSkeleton(),r._envPromise]).then(function(e){r.scene.add(e),r.env.skel=e,r.env=Object.freeze(r.env)}):(r._envPromise.then(function(){r.env=Object.freeze(r.env)}),r._skelPromise=Promise.resolve()),Promise.all([r._envPromise,r._fsPromise,r._skelPromise]).then(function(){e.forEach(function(e){var t=null;if(e instanceof THREE.Object3D?t=e:(t=new THREE.Object3D,e.transform?(t.matrix.fromArray(e.transform),t.matrix.decompose(t.position,t.quaternion,t.scale)):(e.position&&t.position.fromArray(e.position),e.rotation&&t.rotation.fromArray(e.rotation))),e.verticalAlign){var n=r.env.innerHeight/(2*r.env.pixelsPerMeter);switch(e.verticalAlign){case"top":t.translateY(n);break;case"bottom":t.translateY(-n);break;case"middle":break;default:console.warn('Invalid value for "verticalAlign" - ',e.verticalAlign)}}if(r.scene.add(t),r.previewCamera){var i=new THREE.AxisHelper(1);i.userData.altspace={collider:{enabled:!1}},t.add(i)}r.loadAssets(e.assets,o).then(function(o){e.initialize(r.env,t,o)})})}),window.requestAnimationFrame(function e(t){window.requestAnimationFrame(e),r.scene.updateAllBehaviors(),window.TWEEN&&TWEEN.update(),r.renderer.render(r.scene,r.previewCamera)})},a.prototype.loadAssets=function(e,n){return new Promise(function(s,a){Promise.all(Object.keys(e.models||{}).map(function(r){return t(e.models[r])}).concat(Object.keys(e.textures||{}).map(function(t){return r(e.textures[t])}),Object.keys(e.posters||{}).map(function(t){return o(e.posters[t])}))).then(function(){var t={models:{},textures:{},posters:{}};for(var r in e.models){var o=e.models[r],a=i.models[o];t.models[r]=a?n[o]?a:a.clone():null}for(var c in e.textures){var l=e.textures[c],u=i.textures[l];t.textures[c]=u?n[l]?u:u.clone():null}for(var d in e.posters){var p=e.posters[d],m=i.posters[p];t.posters[d]=m?n[p]?m:m.clone():null}s(t)}).catch(function(e){return console.error(e.stack)})})},a}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
