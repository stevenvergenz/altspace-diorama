var Diorama=function(){"use strict";function e(e){return new Promise(function(t,r){if(o.models[e])return t(o.models[e]);if(/\.gltf$/i.test(e))if(THREE.glTFLoader){var n=new THREE.glTFLoader;n.load(e,function(r){return o.models[e]=r.scene.children[0].children[0],t(o.models[e])})}else if(THREE.GLTFLoader){var i=new THREE.GLTFLoader;i.load(e,function(r){return console.log(r),o.models[e]=r.scene.children[0],t(o.models[e])},null,r)}else console.error('glTF loader not found. "'+e+'" not loaded.'),r();else if(/\.dae$/i.test(e))if(THREE.ColladaLoader){var s=new THREE.ColladaLoader;s.load(e,function(r){return o.models[e]=r.scene.children[0],t(r.scene.children[0])},null,r)}else console.error('Collada loader not found. "'+e+'" not loaded.'),r()})}function t(e){return new Promise(function(t,r){if(o.textures[e])return t(o.textures[e]);var n=new THREE.TextureLoader;n.load(e,function(r){return o.textures[e]=r,t(r)},null,r)})}function r(e){return new Promise(function(r,n){return o.posters[e]?r(o.posters[e]):new t(e).then(function(t){var n,i=t.image.width/t.image.height,s=new THREE.MeshBasicMaterial({map:t,side:THREE.DoubleSide});return n=i>1?new THREE.PlaneGeometry(1,1/i):new THREE.PlaneGeometry(i,1),o.posters[e]=new THREE.Mesh(n,s),r(o.posters[e])})})}var o={models:{},textures:{},posters:{}},n=function(e){function t(t,r,o){e.call(this,-1,1,1,-1,.1,400);var n=window.localStorage.getItem("dioramaViewSettings");n&&(n=JSON.parse(n),t||(t=(new THREE.Vector3).fromArray(n.focus)),r||(r=n.viewSize),o||(o=(new THREE.Vector3).fromArray(n.lookDirection))),this._viewSize=r||40,this._focus=t||new THREE.Vector3,this._lookDirection=o||new THREE.Vector3(0,-1,0),this.gridHelper=new THREE.GridHelper(300,1)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={viewSize:{},focus:{},lookDirection:{}};return r.viewSize.get=function(){return this._viewSize},r.viewSize.set=function(e){this._viewSize=e,this.recomputeViewport()},r.focus.get=function(){return this._focus},r.focus.set=function(e){this._focus.copy(e),this.recomputeViewport()},r.lookDirection.get=function(){return this._lookDirection},r.lookDirection.set=function(e){this._lookDirection.copy(e),this.recomputeViewport()},t.prototype.registerHooks=function(e){var t=this;t.renderer=e,document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var r=document.createElement("p");r.innerHTML=["Middle click and drag to pan","Mouse wheel to zoom","Arrow keys to rotate"].join("<br/>"),Object.assign(r.style,{position:"fixed",top:"10px",left:"10px",margin:0}),document.body.appendChild(r),window.addEventListener("resize",function(e){return t.recomputeViewport()}),t.recomputeViewport();var o=null,n=null;window.addEventListener("mousedown",function(e){1===e.button&&(o={x:e.clientX,y:e.clientY},n=t._focus.clone())}),window.addEventListener("mouseup",function(e){1===e.button&&(o=null,n=null)}),window.addEventListener("mousemove",function(e){if(o){var r=document.body,i=r.clientWidth,s=r.clientHeight,a=Math.sqrt(i*i+s*s)/t._viewSize,c=e.clientX-o.x,l=e.clientY-o.y,u=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._focus.copy(n).add(t.up.clone().multiplyScalar(l/a)).add(u.multiplyScalar(-c/a)),t.recomputeViewport()}}),window.addEventListener("wheel",function(e){e.deltaY<0?(t._viewSize*=.9,t.recomputeViewport()):e.deltaY>0&&(t._viewSize*=1.1,t.recomputeViewport())}),window.addEventListener("keydown",function(e){if("ArrowDown"===e.key){var r=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._lookDirection.applyAxisAngle(r,Math.PI/2),t.recomputeViewport()}else if("ArrowUp"===e.key){var o=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._lookDirection.applyAxisAngle(o,-Math.PI/2),t.recomputeViewport()}else"ArrowLeft"===e.key?(t._lookDirection.applyAxisAngle(t.up,-Math.PI/2),t.recomputeViewport()):"ArrowRight"===e.key&&(t._lookDirection.applyAxisAngle(t.up,Math.PI/2),t.recomputeViewport())})},t.prototype.recomputeViewport=function(){var e=document.body,t=e.clientWidth,r=e.clientHeight;this.renderer.setSize(t,r);var o=t/r,n=Math.sqrt(this._viewSize*this._viewSize/(o*o+1)),i=o*n;this.left=-i/2,this.right=i/2,this.top=n/2,this.bottom=-n/2,this.updateProjectionMatrix(),this.position.copy(this._focus).sub(this._lookDirection.clone().multiplyScalar(200)),1===Math.abs(this._lookDirection.normalize().dot(new THREE.Vector3(0,-1,0)))?this.up.set(0,0,1):this.up.set(0,1,0),this.lookAt(this._focus),window.localStorage.setItem("dioramaViewSettings",JSON.stringify({focus:this._focus.toArray(),viewSize:this._viewSize,lookDirection:this._lookDirection.toArray()}))},Object.defineProperties(t.prototype,r),t}(THREE.OrthographicCamera),i=function(e){void 0===e&&(e={});var t=e.bgColor;void 0===t&&(t=11184810);var r=e.gridOffset;void 0===r&&(r=[0,0,0]);var i=e.fullspace;void 0===i&&(i=!1);var s=this;s._cache=o,s.scene=new THREE.Scene,altspace.inClient?(s.renderer=altspace.getThreeJSRenderer(),s._envPromise=Promise.all([altspace.getEnclosure(),altspace.getSpace()]).then(function(e){var t=e[0],r=e[1];s.env=Object.freeze(Object.assign({},t,r)),s.scene.scale.multiplyScalar(t.pixelsPerMeter),i&&t.requestFullspace().catch(function(e){return console.log("Request for fullspace denied")})})):(s.renderer=new THREE.WebGLRenderer,s.renderer.setSize(document.body.clientWidth,document.body.clientHeight),s.renderer.setClearColor(t),document.body.appendChild(s.renderer.domElement),s.previewCamera=new n,s.previewCamera.gridHelper.position.fromArray(r),s.scene.add(s.previewCamera,s.previewCamera.gridHelper),s.previewCamera.registerHooks(s.renderer),altspace.utilities.shims.cursor.init(s.scene,s.previewCamera,{renderer:s.renderer}),s.env=Object.freeze({innerWidth:1024,innerHeight:1024,innerDepth:1024,pixelsPerMeter:i?1:1024/3,sid:"browser",name:"browser",templateSid:"browser"}))};return i.prototype.start=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var r=this;if(!r.env)return r._envPromise.then(function(){r.start.apply(r,e)});var o={};e.forEach(function(e){function t(e){void 0===o[e]?o[e]=!0:o[e]===!0&&(o[e]=!1)}Object.keys(e.assets.textures||{}).map(function(t){return e.assets.textures[t]}).forEach(t),Object.keys(e.assets.models||{}).map(function(t){return e.assets.models[t]}).forEach(t),Object.keys(e.assets.posters||{}).map(function(t){return e.assets.posters[t]}).forEach(t)});var n=e.reduce(function(e,t){return e||t.needsSkeleton},!1);n&&altspace.inClient&&altspace.getThreeJSTrackingSkeleton().then(function(e){r.scene.add(e),r.env.skel=e}),e.forEach(function(e){var t=null;if(e instanceof THREE.Object3D?t=e:(t=new THREE.Object3D,e.transform?(t.matrix.fromArray(e.transform),t.matrix.decompose(t.position,t.quaternion,t.scale)):(e.position&&t.position.fromArray(e.position),e.rotation&&t.rotation.fromArray(e.rotation))),e.verticalAlign){var n=r.env.innerHeight/(2*r.env.pixelsPerMeter);switch(e.verticalAlign){case"top":t.translateY(n);break;case"bottom":t.translateY(-n);break;case"middle":break;default:console.warn('Invalid value for "verticalAlign" - ',e.verticalAlign)}}r.scene.add(t),r.previewCamera&&t.add(new THREE.AxisHelper(1)),r.loadAssets(e.assets,o).then(function(o){e.initialize(r.env,t,o)})}),window.requestAnimationFrame(function e(t){window.requestAnimationFrame(e),r.scene.updateAllBehaviors(),window.TWEEN&&TWEEN.update(),r.renderer.render(r.scene,r.previewCamera)})},i.prototype.loadAssets=function(n,i){return new Promise(function(s,a){Promise.all(Object.keys(n.models||{}).map(function(t){return e(n.models[t])}).concat(Object.keys(n.textures||{}).map(function(e){return t(n.textures[e])}),Object.keys(n.posters||{}).map(function(e){return r(n.posters[e])}))).then(function(){var e={models:{},textures:{},posters:{}};for(var t in n.models){var r=n.models[t],a=o.models[r];e.models[t]=a?i[r]?a:a.clone():null}for(var c in n.textures){var l=n.textures[c],u=o.textures[l];e.textures[c]=u?i[l]?u:u.clone():null}for(var d in n.posters){var p=n.posters[d],f=o.posters[p];e.posters[d]=f?i[p]?f:f.clone():null}s(e)}).catch(function(e){return console.error(e)})})},i}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
