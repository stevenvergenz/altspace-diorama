var Diorama=function(){"use strict";var e=function(e){function t(t){e.call(this,function(e,o){if(/\.gltf$/i.test(t))if(THREE.glTFLoader){var r=new THREE.glTFLoader;r.load(t,function(t){e(t.scene.children[0].children[0])})}else console.error('THREE.glTFLoader not found. "'+t+'" not loaded.'),o();else if(/\.dae$/i.test(t))if(THREE.ColladaLoader){var i=new THREE.ColladaLoader;i.load(t,function(t){return e(t.scene.children[0])},null,o)}else console.error('THREE.ColladaLoader not found. "'+t+'" not loaded.'),o()})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Promise),t=function(e){function t(t){e.call(this,function(e,o){var r=new THREE.TextureLoader;r.load(t,e,null,o)})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Promise),o=function(e){function t(t,o,r){e.call(this,-1,1,1,-1,.1,400);var i=window.localStorage.getItem("dioramaViewSettings");i&&(i=JSON.parse(i),t||(t=(new THREE.Vector3).fromArray(i.focus)),o||(o=i.viewSize),r||(r=(new THREE.Vector3).fromArray(i.lookDirection))),this._viewSize=o||40,this._focus=t||new THREE.Vector3,this._lookDirection=r||new THREE.Vector3(0,-1,0),this.gridHelper=new THREE.GridHelper(300,1)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var o={viewSize:{},focus:{},lookDirection:{}};return o.viewSize.get=function(){return this._viewSize},o.viewSize.set=function(e){this._viewSize=e,this.recomputeViewport()},o.focus.get=function(){return this._focus},o.focus.set=function(e){this._focus.copy(e),this.recomputeViewport()},o.lookDirection.get=function(){return this._lookDirection},o.lookDirection.set=function(e){this._lookDirection.copy(e),this.recomputeViewport()},t.prototype.registerHooks=function(e){var t=this;t.renderer=e,document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var o=document.createElement("p");o.innerHTML=["Middle click and drag to pan","Mouse wheel to zoom","Arrow keys to rotate"].join("<br/>"),Object.assign(o.style,{position:"fixed",top:"10px",left:"10px",margin:0}),document.body.appendChild(o),window.addEventListener("resize",function(e){return t.recomputeViewport()}),t.recomputeViewport();var r=null,i=null;window.addEventListener("mousedown",function(e){1===e.button&&(r={x:e.clientX,y:e.clientY},i=t._focus.clone())}),window.addEventListener("mouseup",function(e){1===e.button&&(r=null,i=null)}),window.addEventListener("mousemove",function(e){if(r){var o=document.body,n=o.clientWidth,s=o.clientHeight,a=Math.sqrt(n*n+s*s)/t._viewSize,c=e.clientX-r.x,l=e.clientY-r.y,u=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._focus.copy(i).add(t.up.clone().multiplyScalar(l/a)).add(u.multiplyScalar(-c/a)),t.recomputeViewport()}}),window.addEventListener("wheel",function(e){e.deltaY<0?(t._viewSize*=.9,t.recomputeViewport()):e.deltaY>0&&(t._viewSize*=1.1,t.recomputeViewport())}),window.addEventListener("keydown",function(e){if("ArrowDown"===e.key){var o=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._lookDirection.applyAxisAngle(o,Math.PI/2),t.recomputeViewport()}else if("ArrowUp"===e.key){var r=(new THREE.Vector3).crossVectors(t._lookDirection,t.up);t._lookDirection.applyAxisAngle(r,-Math.PI/2),t.recomputeViewport()}else"ArrowLeft"===e.key?(t._lookDirection.applyAxisAngle(t.up,-Math.PI/2),t.recomputeViewport()):"ArrowRight"===e.key&&(t._lookDirection.applyAxisAngle(t.up,Math.PI/2),t.recomputeViewport())})},t.prototype.recomputeViewport=function(){var e=document.body,t=e.clientWidth,o=e.clientHeight;this.renderer.setSize(t,o);var r=t/o,i=Math.sqrt(this._viewSize*this._viewSize/(r*r+1)),n=r*i;this.left=-n/2,this.right=n/2,this.top=i/2,this.bottom=-i/2,this.updateProjectionMatrix(),this.position.copy(this._focus).sub(this._lookDirection.clone().multiplyScalar(200)),1===Math.abs(this._lookDirection.normalize().dot(new THREE.Vector3(0,-1,0)))?this.up.set(0,0,1):this.up.set(0,1,0),this.lookAt(this._focus),window.localStorage.setItem("dioramaViewSettings",JSON.stringify({focus:this._focus.toArray(),viewSize:this._viewSize,lookDirection:this._lookDirection.toArray()}))},Object.defineProperties(t.prototype,o),t}(THREE.OrthographicCamera),r=function(e){void 0===e&&(e={});var t=e.bgColor;void 0===t&&(t=11184810);var r=e.gridOffset;void 0===r&&(r=new THREE.Vector3);var i=this;i.assetCache={models:{},textures:{},videos:{}},i.scene=new THREE.Scene,altspace.inClient?(i.renderer=altspace.getThreeJSRenderer(),i._envPromise=Promise.all([altspace.getEnclosure(),altspace.getSpace()]).then(function(e){var t=e[0],o=e[1];i.env=Object.freeze(Object.assign({},t,o)),i.scene.scale.multiplyScalar(t.pixelsPerMeter)})):(i.renderer=new THREE.WebGLRenderer,i.renderer.setSize(document.body.clientWidth,document.body.clientHeight),i.renderer.setClearColor(t),document.body.appendChild(i.renderer.domElement),i.previewCamera=new o,i.previewCamera.gridHelper.position.copy(r),i.scene.add(i.previewCamera,i.previewCamera.gridHelper),i.previewCamera.registerHooks(i.renderer),altspace.utilities.shims.cursor.init(i.scene,i.previewCamera,{renderer:i.renderer}),i.env=Object.freeze({innerWidth:1024,innerHeight:1024,innerDepth:1024,pixelsPerMeter:1024/3,sid:"browser",name:"browser",templateSid:"browser"}))};return r.prototype.start=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var o=this;if(!o.env)return o._envPromise.then(function(){o.start.apply(o,e)});var r={};e.forEach(function(e){function t(e){void 0===r[e]?r[e]=!0:r[e]===!0&&(r[e]=!1)}Object.keys(e.assets.textures||{}).map(function(t){return e.assets.textures[t]}).forEach(t),Object.keys(e.assets.models||{}).map(function(t){return e.assets.models[t]}).forEach(t)});var i=e.reduce(function(e,t){return e||t.needsSkeleton},!1);i&&altspace.inClient&&altspace.getThreeJSTrackingSkeleton().then(function(e){o.scene.add(e),o.env.skel=e}),e.forEach(function(e){var t=null;if(e instanceof THREE.Object3D?t=e:(t=new THREE.Object3D,e.transform?(t.matrix.fromArray(e.transform),t.matrix.decompose(t.position,t.quaternion,t.scale)):(e.position&&t.position.fromArray(e.position),e.rotation&&t.rotation.fromArray(e.rotation))),e.verticalAlign){var i=o.env.innerHeight/(2*o.env.pixelsPerMeter);switch(e.verticalAlign){case"top":t.translateY(i);break;case"bottom":t.translateY(-i);break;case"middle":break;default:console.warn('Invalid value for "verticalAlign" - ',e.verticalAlign)}}o.scene.add(t),o.previewCamera&&t.add(new THREE.AxisHelper(1)),o.loadAssets(e.assets,r).then(function(r){e.initialize(o.env,t,r)})}),window.requestAnimationFrame(function e(t){window.requestAnimationFrame(e),o.scene.updateAllBehaviors(),window.TWEEN&&TWEEN.update(),o.renderer.render(o.scene,o.previewCamera)})},r.prototype.loadAssets=function(o,r){var i=this,n=function(e){function t(t){e.call(this,function(e,o){function r(){0===--i&&e()}var i=t.length;t.forEach(function(e){e.then(r,r)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Promise);return new Promise(function(s,a){n([Promise.all(Object.keys(o.models||{}).map(function(t){var r=o.models[t];return i.assetCache.models[r]?Promise.resolve(i.assetCache.models[r]):e(r).then(function(e){i.assetCache.models[r]=e})})),Promise.all(Object.keys(o.textures||{}).map(function(e){var r=o.textures[e];return i.assetCache.textures[r]?Promise.resolve(i.assetCache.textures[r]):t(r).then(function(e){i.assetCache.textures[r]=e})}))]).then(function(){var e={models:{},textures:{}};for(var t in o.models){var n=o.models[t],a=i.assetCache.models[n];e.models[t]=a?r[n]?a:a.clone():null}for(var c in o.textures){var l=o.textures[c],u=i.assetCache.textures[l];e.textures[c]=u?r[l]?u:u.clone():null}s(e)})})},r}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
